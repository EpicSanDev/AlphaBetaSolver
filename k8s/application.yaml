# Master Node Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: master-node
  namespace: gto-solver
spec:
  replicas: 2
  selector:
    matchLabels:
      app: master-node
  template:
    metadata:
      labels:
        app: master-node
    spec:
      containers:
      - name: master-node
        image: rg.fr-par.scw.cloud/namespace-ecstatic-einstein/epicsandev/alphabetasolver-backend:main
        command: ["python", "-m", "master_node.main"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: database-url
        - name: RABBITMQ_HOST
          value: rabbitmq
        - name: RABBITMQ_PORT
          value: "5672"
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: username
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: password
        - name: REDIS_URL
          value: redis://redis:6379
        - name: NODE_TYPE
          value: master
        - name: API_HOST
          value: 0.0.0.0
        - name: API_PORT
          value: "8000"
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: secret-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret-key
        ports:
        - containerPort: 8000
          name: api
        - containerPort: 8001
          name: metrics
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: logs-storage
          mountPath: /app/logs
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: app-data-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: app-logs-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: master-node
  namespace: gto-solver
spec:
  selector:
    app: master-node
  ports:
  - name: api
    port: 8000
    targetPort: 8000
  - name: metrics
    port: 8001
    targetPort: 8001
  type: ClusterIP

---
# Compute Node Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compute-node
  namespace: gto-solver
spec:
  replicas: 5
  selector:
    matchLabels:
      app: compute-node
  template:
    metadata:
      labels:
        app: compute-node
    spec:
      containers:
      - name: compute-node
        image: rg.fr-par.scw.cloud/namespace-ecstatic-einstein/epicsandev/alphabetasolver-backend:main
        command: ["python", "-m", "compute_node.agent"]
        env:
        - name: RABBITMQ_HOST
          value: rabbitmq
        - name: RABBITMQ_PORT
          value: "5672"
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: username
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: password
        - name: NODE_TYPE
          value: compute
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MAX_CONCURRENT_TASKS
          value: "8"
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: logs-storage
          mountPath: /app/logs
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: app-data-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: app-logs-pvc

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: gto-solver
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: rg.fr-par.scw.cloud/namespace-ecstatic-einstein/epicsandev/alphabetasolver-frontend:main
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: gto-solver
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# Application Data PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data-pvc
  namespace: gto-solver
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: shared-storage

---
# Application Logs PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-logs-pvc
  namespace: gto-solver
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: shared-storage

---
# Horizontal Pod Autoscaler for Compute Nodes
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: compute-node-hpa
  namespace: gto-solver
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: compute-node
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for Master Nodes
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: master-node-hpa
  namespace: gto-solver
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: master-node
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
